name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: [ '**' ]
    tags-ignore: [ '**' ]

  # Triggers the workflow on pull request events
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Test on ${{ matrix.arch }} ${{ matrix.io_library_flag }} ${{ matrix.mpi_flag }} ${{ matrix.prec_flag }} ${{ matrix.gpu_flag }}
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
  
    strategy:
      fail-fast: false  # false: try to complete all jobs
      
      matrix:
      
        arch:
          - github/ubuntu/gnu/9.3.0
          
        io_library_flag: ['']  # Switch between Serialbox and HDF5
        # FIXME: serialbox builds are currently disabled until a compatible serialbox version is available to Github actions
        
        mpi_flag: ['', '--with-mpi']  # Enable MPI-parallel build

        prec_flag: ['', '--single-precision']  # Switch single/double precision

        gpu_flag: ['', '--with-gpu']  # GPU-variants enabled

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Sets-up environment and installs required packages
      - name: Environment setup
        run: |
          [[ "${{ matrix.mpi_flag }}" == "--with-mpi" ]] && sudo apt install libopenmpi-dev || true
          [[ "${{ matrix.io_library_flag }}" != "--with-serialbox" ]] && sudo apt install libhdf5-dev || true
      
      # Check-out dependencies as part of the bundle creation
      - name: Bundle create
        run: ./cloudsc-bundle create
        
      # Build the targets
      - name: Bundle build
        run: |
          ./cloudsc-bundle build --retry-verbose \
          --arch=arch/${{ matrix.arch }} ${{ matrix.prec_flag }} \
          ${{ matrix.mpi_flag }} ${{ matrix.io_library_flag }} ${{ matrix.gpu_flag }}

      # Verify targets exist
      - name: Verify targets
        env:
          io_library_flag: ${{ matrix.io_library_flag }}
          gpu_flag: ${{ matrix.gpu_flag }}
        run: .github/scripts/verify-targets.sh

      # Run double-precision targets
      # (Mind the exclusions inside the script!)
      - name: Run targets
        env:
          mpi_flag: ${{ matrix.mpi_flag }}
        if: ${{ matrix.prec_flag == '' }}
        run: .github/scripts/run-targets.sh
